2 + 15 == 17.
49 * 100 == 4900.
1892 - 1472 == 420.
5 / 2 == 2.5. % float
5 div 2 == 2.  % integer
5 rem 2 == 1.
3-2-1 == (3-2)-1.
-5 == (0 - 5).
14 rem 5 == 4.
14 rem -5 == 4.
-14 rem 5 == -4.
-14 rem -5 == -4.

2#111 == 7.
16#20 == 32.

One = 1.     % first time binds;
One = 1.     % second time matches.
One == 1.    % Compare only.
Un = Uno = One = 1.

47 = 45 + 2.   % matches, so no exception.
_ = 12.        % anonymous match.

f(Un).         % unbind (in shell only).
f().           % unbind all.

bob == bob     % Atom start with lc character. They are automatically bound to their own name. They cannot be rebound.

'Also an atom'.

% Atoms are never garbage collected; don't generate them.

% reserved: after and andalso band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse query receive rem try when xor

true or false and not true.
false andalso (1 / 0).     % orelse.

(5 =:= 5.0) == false.      % compare equal with no type conversion.
(5 =/= 5.0) == true.       % compare not equal with no type conversion.

(5 == 5.0) == true.        % compare equal with auto type conversion.
(5 /= 5.0) == false.       % compare not equal with auto type conversion.

(1 >= 1) == true.          % Relational ops are not like arrows.
(2 =< 2) == true.

(0 == false) == false.

% number < atom < reference < fun < port < pid < tuple < list < bit string

Point = {10,4}.
Point == {10,4}.
{X,Y} = Point.
(X == 10) and (Y == 4).
[apple, banana, cherry].     % list of atoms.
[[apple, [banana]], 3.14].   % nested lists and mixed types.

% ++ is list concatenation
[apple, banana] ++ [cherry, durian] == [apple, banana, cherry, durian].
[apple, banana] ++ [] == [apple, banana].
[] ++ [apple, banana] == [apple, banana].

hd([apple, banana, cherry]) == apple.
tl([apple, banana, cherry]) == [banana, cherry].

length([apple, banana, cherry]) == 3.

[apple | [banana, cherry]] == [apple, banana, cherry].

[2 | [1 | []]] == [2,1].

% improper lists:
[1 | 2] == [1 | 2].

% strings are lists of ascii codes. If a list looks like a string, it will be displayed like one.

"cat" ++ [2] == [99,97,116,2].  % 2 is not a regular ascii printable character, so the expression prints as a list of integers.

"cat" == [99,97,116].  % true, but the list is displayed like "cat".


% list comprehensions

[2*N || N <- [1,2,3,4]] == [2,4,6,8].

% with a predicate:
[X || X <- [1,2,3,4,5,6,7,8], X rem 2 =:= 0] == [2,4,6,8].  

% product. The rightmost varies fastest. 
[{X,Y} || X <- [1,2], Y <- [3,4]] == [{1,3},{1,4},{2,3},{2,4}].

% modules

erlang:element(2,{a,b,c}) == b.
element(2,{a,b,c}) == b.            % erlang module is assumed.
list:seq(1,4) == [1,2,3,4].         % other modules must be named.

 
